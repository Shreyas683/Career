#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_VERTICES 100

struct Node {
  char* data;
  struct Node* next;
};

struct Graph {
  int num_vertices;
  struct Node* adj_list[MAX_VERTICES];
  int visited[MAX_VERTICES];
};

void add_edge(struct Graph* graph, char* src, char* dest) {
  // create a new adjacency list node for the destination vertex
  struct Node* dest_node = (struct Node*) malloc(sizeof(struct Node));
  dest_node->data = dest;
  dest_node->next = NULL;

  // add the new node to the adjacency list of the source vertex
  int src_index = -1, dest_index = -1;
  int i;
  for (i = 0; i < graph->num_vertices; i++) {
    if (strcmp(src, graph->adj_list[i]->data) == 0) {
      src_index = i;
    }
    if (strcmp(dest, graph->adj_list[i]->data) == 0) {
      dest_index = i;
    }
    if (src_index != -1 && dest_index != -1) {
      break;
    }
  }
  if (src_index == -1) {
    struct Node* src_node = (struct Node*) malloc(sizeof(struct Node));
    src_node->data = src;
    src_node->next = dest_node;
    graph->adj_list[graph->num_vertices++] = src_node;
  } else {
    struct Node* curr = graph->adj_list[src_index];
    while (curr->next != NULL) {
      curr = curr->next;
    }
    curr->next = dest_node;
  }
}

void dfs(struct Graph* graph, int vertex_index) {
  graph->visited[vertex_index] = 1;
  printf("%s ", graph->adj_list[vertex_index]->data);

  struct Node* curr = graph->adj_list[vertex_index]->next;
  while (curr != NULL) {
    int neighbor_index = -1;
    int i;
    for (i = 0; i < graph->num_vertices; i++) {
      if (strcmp(curr->data, graph->adj_list[i]->data) == 0) {
        neighbor_index = i;
        break;
      }
    }
    if (neighbor_index != -1 && graph->visited[neighbor_index] == 0) {
      dfs(graph, neighbor_index);
    }
    curr = curr->next;
  }
}

void dfs_traversal(struct Graph* graph) {
  int i;
  for (i = 0; i < graph->num_vertices; i++) {
    graph->visited[i] = 0;
  }

  for (i = 0; i < graph->num_vertices; i++) {
    if (graph->visited[i] == 0) {
      dfs(graph, i);
    }
  }
}

int main() {
  struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
  graph->num_vertices = 0;

  add_edge(graph, "10th", "Diploma");//1
  add_edge(graph, "10th", "Science");//2
  add_edge(graph, "10th", "Commerce");//3
  add_edge(graph, "10th", "Arts");//4
  add_edge(graph, "Science", "B.Arch");//6
  add_edge(graph, "Science", "B.Sc");//7
  add_edge(graph, "Science", "B.E");//8
  add_edge(graph, "Science", "BAMS");//9
  add_edge(graph, "Science", "MBBS");//10
  add_edge(graph, "Science", "BDS");//11
  add_edge(graph, "Science", "B.Pharma");//12
  add_edge(graph, "B.Sc", "M.Sc");//13
  add_edge(graph, "M.Sc", "P.hD");//14
  add_edge(graph, "B.Pharma", "M.Pharma");//15
  add_edge(graph, "B.E", "M.Tech");//16
  add_edge(graph, "BAMS", "M.D");//17
  add_edge(graph, "MBBS", "M.D");//18
  add_edge(graph, "M.D", "P.hD");//19
  add_edge(graph, "BDS", "MDS");//20
  add_edge(graph, "Commerce", "CS");
  add_edge(graph, "Commerce", "B.com");
  add_edge(graph, "Commerce", "BBA");
  add_edge(graph, "Commerce", "BCA");
  add_edge(graph, "Commerce", "CA");
  add_edge(graph, "B.com", "M.com");
  add_edge(graph, "B.com", "B.Ed");
  add_edge(graph, "B.com", "MBA");
  add_edge(graph, "B.Ed", "M.Ed");
  add_edge(graph, "BBA", "MBA");
  add_edge(graph, "BCA", "MCA");
  add_edge(graph, "Arts", "BBA");
  add_edge(graph, "Arts", "BSW");
  add_edge(graph, "Arts", "BA");
  add_edge(graph, "Arts", "LLB");
  add_edge(graph, "BSW", "MSW");
  add_edge(graph, "BA", "MA");
  add_edge(graph, "BA", "MCA");
  add_edge(graph, "LLB", "LLM");
  add_edge(graph, "Diploma", "BE");
  add_edge(graph, "M.Pharma", "P.hd");
  add_edge(graph, "M.tech", "P.hd");


  printf("DFS Traversal: ");
  dfs_traversal(graph);
  printf("\n");

  return 0;
}
